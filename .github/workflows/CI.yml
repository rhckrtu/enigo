name: CI

permissions:
  contents: read
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        rust:
         # - stable
          - nightly
         # - "1.75.0"
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        features:
         # - "libei,wayland,xdo,x11rb"
          - "default"
         # - "libei"
         # - "wayland"
          - "xdo"
          - "x11rb"
        exclude:
          - platform: windows-latest
            features: "libei,wayland,xdo,x11rb"
          - platform: windows-latest
            features: "libei"
          - platform: windows-latest
            features: "wayland"
          - platform: windows-latest
            features: "xdo"
          - platform: windows-latest
            features: "x11rb"
          - platform: macos-latest
            features: "libei,wayland,xdo,x11rb"
          - platform: macos-latest
            features: "libei"
          - platform: macos-latest
            features: "wayland"
          - platform: macos-latest
            features: "xdo"
          - platform: macos-latest
            features: "x11rb"
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install_deps
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy



     # - name: Check the code format
     #   if: matrix.rust == 'nightly' # Avoid differences between the versions
     #   run: cargo fmt -- --check

     # - name: Check clippy lints
     #   run: cargo clippy --no-default-features --features ${{ matrix.features }} -- -D clippy::pedantic
     # - name: Check clippy lints for the examples
     #   run: cargo clippy --no-default-features --features ${{ matrix.features }} --examples -- -D clippy::pedantic

     # - name: Build the code
     #   run: cargo build --no-default-features --features ${{ matrix.features }}

     # - name: Build the docs
     #   run: cargo doc --no-deps --no-default-features --features ${{ matrix.features }}

     # - name: Build the examples
     #   run: cargo check --examples --no-default-features --features ${{ matrix.features }}

    #  - name: Build the examples in release mode
    #    run: cargo check --release --examples --no-default-features --features ${{ matrix.features }}

      - name: Setup headless display for integration tests on Linux
        if: runner.os != 'Windows' # This step is only needed on Linux and macOS. The other OSs don't need to be set up
        uses: ./.github/actions/headless_display

    #  - name: Start Firefox
    #    shell: bash
     #   run: |
    #      if [ "$RUNNER_OS" == "Windows" ]; then
    #        start firefox tests/index.html
    #      else
    #        firefox tests/index.html &
     #     fi

      - name: Take screenshot
        uses: ./.github/actions/screenshot
        with:
          step: before
          rust: ${{ matrix.rust }}
          platform: ${{ matrix.platform }}
          feature: ${{ matrix.features }}

      - name: Run integration tests
        run: cargo test integration --no-default-features --features ${{ matrix.features }} -- --test-threads=1 --include-ignored --nocapture

      - name: Take screenshot
        if: always() 
        uses: ./.github/actions/screenshot
        with:
          step: during
          rust: ${{ matrix.rust }}
          platform: ${{ matrix.platform }}
          feature: ${{ matrix.features }}

    #  - name: Do something after the integration tests
    #    if: always()
    #    run: cargo run --example fix_integration2

    #  - name: Take screenshot
    #    if: always()
     #   uses: ./.github/actions/screenshot
     #   with:
     #     step: after
    #      rust: ${{ matrix.rust }}
    #      platform: ${{ matrix.platform }}
     #     feature: ${{ matrix.features }}

      # Delete duplicate artifacts
    #  - uses: geekyeggo/delete-artifact@v5
    #    if: always()
    #    with:
    #      name: |
    #        ${{ matrix.platform }}_${{ matrix.rust }}_desktop_before.jpg
     #       ${{ matrix.platform }}_${{ matrix.rust }}_desktop_during.jpg
    #        ${{ matrix.platform }}_${{ matrix.rust }}_desktop_after.jpg